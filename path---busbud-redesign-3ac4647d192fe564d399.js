webpackJsonp([99759139122568],{"./node_modules/json-loader/index.js!./.cache/json/busbud-redesign.json":function(e,t){e.exports={data:{markdownRemark:{html:"<p><a href=\"busbud.com\">Busbud.com</a> is a intercity Bus OTA that sells bus tickets online in 63 countries on a million + routes. As part of the on-going effort of improving the website experience, I redesigned the core funel on mobile web and desktop.</p>\n<h2>Goals</h2>\n<p>The redesign goals were to address a couple of creeping UX &#x26; technical issues that busbud was facing.</p>\n<ol>\n<li>Improve the mobile experience, conversation rates and satisfaction.</li>\n<li>Revisit the website navigation to better align with users intention to navigate between pages of the funel.</li>\n<li>Implement solid component based design system to speed up the design process and front-end development</li>\n</ol>\n<p>Since many subscribers had develop the habit of talking to the company writing directly to 'Rachel' I figure we had to opportunity to encourage it. A questionnaire can hardly by itself promotte communication or provide enough value for customers to willingly come back.</p>\n<p>Based on earlier research by the team, a clear profile of we Rachel oauth to be was already develop, and we knew, subscribers loved her for her advice and personality. If we managed to create a more personal interaction with the character, would they be interrested enough to seek to opportunity to interact with her on a regular basis?</p>\n<p>That's what I set out to try, and the style profile is the first experiment to figure out which kind of interraction with Rachel genuinely provides value for both the subscriber and the company.</p>\n<h2>Development</h2>\n<h3>Design</h3>\n<p>The early design quickly took the form of a convesational UI. For technical fesability, scope, and honestly out of accuracy, using language recognition was out of question.</p>\n<p>However the focus was on put on 2 specific aspects:</p>\n<ul>\n<li>Implement a simple, intuitive and 'fun' input method to talk with Rachel.</li>\n<li>Balance the focus between Rachel (the conversation) and the visual content.</li>\n</ul>\n<p>That balance was especially important to strike because afterall, 'Rachel' is not the value, it's the thights. Fostering a sense of excitement over their next box is the underlying objective.</p>\n<p>In contrast with other conversational UI, talking with Rachel is primarely turned into a visual experience by making use of large visuals that are used as the input method. Each 'option' is given the ability to be 'loved' reflecting a subscriber preference. By making of use of sidescrolling to browse the options, the visuals can remain large but also maintain the context of the conversation. The input section is also contained with a different background color to shift the focus away from the conversation toward the visual content.</p>\n<p><img src=\"./static/input-method.gif\" alt=\"Input Method\"></p>\n<h3>Development</h3>\n<p>The webapp is develop in Node.js on the backend and Preact on the frontend.</p>\n<p>All the conversation logic is done server side and only the messages are delivered to the client using a simple REST api.</p>\n<h4>Frontend</h4>\n<p>The frontend is simple. It uses a conversation component that handles the rendering of messages. If the last messages is a question, it will also render the associated question componenent. The questions components are generic to a question type and is populated using the data specific to that question (delivered by the server). There is additional logic to deal with delayed typing on the computer and validation.</p>\n<p>Preact was used to keep the bundle size to a minumun since it remains a very small application on the front-end. The package adds up to ~130kb on production.</p>\n<h4>Backend</h4>\n<p>The heavy lifting is done of the server. The application contains 'scenarios', each with a specific scripts. When a user logs in, the appropriate scenario is assigned to the session and the converstaion controller restore the conversation and inititalize the new messages. As the conversation goes on, the converstation controllers goes thought the questions in a scenario before evaluating if a the scenario is complain and then moving to the next appropriate one.</p>\n<p>Each messages are also provided with a 'context' that contains various information about previous answers and user details to reused information that appeared during the conversation. This way previous replies can be referenced.</p>\n<p>Whenever question are answer and new messages are delivered, they are saved to PostgreSQL database so they can be restore on resfresh or next visit. </p>\n<h2>Results</h2>\n<p>To try the style profile, you will have to create and account at fromrachel.com/my-account and click on the 'style profile' button in your account or in the welcome email. Here is a few gif of the interactions with Rachel's.</p>",frontmatter:{date:"2017-09-01T12:00:00Z",path:"/busbud-redesign",title:"Busbud Redesign",timeframe:"March - June 2017",images:{first:"bb1",second:"bb2"},gradient:{left:"#5CAFEC",right:"#5CAFEC"}}}},pathContext:{}}}});
//# sourceMappingURL=path---busbud-redesign-3ac4647d192fe564d399.js.map